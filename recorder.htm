<!DOCTYPE html>
<html>

<head>
    <title>Media Recorder in Javascript</title>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js" integrity="sha384-9/reFTGAW83EW2RDu2S0VKaIzap3H66lZH81PoYlFhbGU+6BZp6G7niu735Sk7lN" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js" integrity="sha384-w1Q4orYjBQndcko6MimVbzY0tgp4pWB4lZ7lr30WKz0vr/aWKhXdBNmNb5D92v7s" crossorigin="anonymous"></script>
    <style type="text/css">
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        button {
            margin: 0 3px 10px 0;
            padding-left: 2px;
            padding-right: 2px;
            width: 99px;
        }
        
        button:last-of-type {
            margin: 0;
        }
        
        p.borderBelow {
            margin: 0 0 20px 0;
            padding: 0 0 20px 0;
        }
        
        video {
            vertical-align: top;
            --width: 25vw;
            width: var(--width);
            height: calc(var(--width) * 0.5625);
        }
        
        video:last-of-type {
            margin: 0 0 20px 0;
        }
        
        video#gumVideo {
            margin: 0 20px 20px 0;
        }
    </style>
</head>

<body>
    <div id="container-fluid">
        <video style="width: 100vw;
    height: 55vh;" id="gum" playsinline autoplay muted></video>
        <video id="recorded" playsinline loop></video>


        <div style="width: 80vw;
    height: 10vh;" class="d-flex justify-content-around">
            <button class="btn btn-success text-light btn-sm btn-block mt-2" style="width: 15%; height: 35px;" id="start">Start camera</button>
            <button id="record" class="btn btn-danger text-light btn-sm btn-block " style="width: 15%; height: 35px;" disabled>Record</button>
            <button class="btn btn-warning text-light btn-sm btn-block " style="width: 15%; height: 35px;" id="play" disabled>Play</button>
            <button class="btn btn-danger text-light btn-sm btn-block " style="width: 15%; height: 35px;" id="cancel">cancel</button>
            <button class="btn btn-warning text-light btn-sm btn-block " style="width: 15%; height: 35px;" id="download" disabled>Download</button>
        </div>

    </div>
    <div class="d-none">
        <h4>Media Stream Constraints options</h4>
        <p>
            Echo cancellation: <input type="checkbox" id="echoCancellation" checked />
        </p>

    </div>
    <div>
        <div>
            <span id="errorMsg"></span>
        </div>
    </div>
</body>
<script>
    'use strict';

    /* globals MediaRecorder */

    let mediaRecorder;
    let recordedBlobs;

    const errorMsgElement = document.querySelector('span#errorMsg');
    const recordedVideo = document.querySelector('video#recorded');
    const recordButton = document.querySelector('button#record');
    const playButton = document.querySelector('button#play');
    const downloadButton = document.querySelector('button#download');


    recordButton.addEventListener('click', () => {
        if (recordButton.textContent === 'Record') {
            startRecording();
        } else {
            stopRecording();
            recordButton.textContent = 'Record';
            playButton.disabled = false;
            downloadButton.disabled = false;
        }
    });


    playButton.addEventListener('click', () => {
        const superBuffer = new Blob(recordedBlobs, {
            type: 'video/webm'
        });
        recordedVideo.src = null;
        recordedVideo.srcObject = null;
        recordedVideo.src = window.URL.createObjectURL(superBuffer);
        recordedVideo.controls = true;
        recordedVideo.play();
    });


    downloadButton.addEventListener('click', () => {
        const blob = new Blob(recordedBlobs, {
            type: 'video/mp4'
        });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = localStorage.getItem('name') + '.mp4';
        document.body.appendChild(a);
        a.click();
        setTimeout(() => {
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
        }, 100);
    });

    function handleDataAvailable(event) {
        console.log('handleDataAvailable', event);
        if (event.data && event.data.size > 0) {
            recordedBlobs.push(event.data);
        }
    }

    function startRecording() {
        recordedBlobs = [];
        let options = {
            mimeType: 'video/webm;codecs=vp9,opus'
        };
        try {
            mediaRecorder = new MediaRecorder(window.stream, options);
        } catch (e) {
            console.error('Exception while creating MediaRecorder:', e);
            errorMsgElement.innerHTML = `Exception while creating MediaRecorder: ${JSON.stringify(e)}`;
            return;
        }

        console.log('Created MediaRecorder', mediaRecorder, 'with options', options);
        recordButton.textContent = 'Stop Recording';
        playButton.disabled = true;
        downloadButton.disabled = true;
        mediaRecorder.onstop = (event) => {
            console.log('Recorder stopped: ', event);
            console.log('Recorded Blobs: ', recordedBlobs);
        };
        mediaRecorder.ondataavailable = handleDataAvailable;
        mediaRecorder.start();
        console.log('MediaRecorder started', mediaRecorder);
    }

    function stopRecording() {
        mediaRecorder.stop();
    }

    function handleSuccess(stream) {
        recordButton.disabled = false;
        console.log('getUserMedia() got stream:', stream);
        window.stream = stream;

        const gumVideo = document.querySelector('video#gum');
        gumVideo.srcObject = stream;
    }

    async function init(constraints) {
        try {
            const stream = await navigator.mediaDevices.getUserMedia(constraints);
            handleSuccess(stream);
        } catch (e) {
            console.error('navigator.getUserMedia error:', e);
            errorMsgElement.innerHTML = `navigator.getUserMedia error:${e.toString()}`;
        }
    }

    document.querySelector('button#start').addEventListener('click', async() => {
        const hasEchoCancellation = document.querySelector('#echoCancellation').checked;
        const constraints = {
            audio: {
                echoCancellation: {
                    exact: hasEchoCancellation
                }
            },
            video: {
                width: 1280,
                height: 720
            }
        };
        console.log('Using media constraints:', constraints);
        await init(constraints);
    });
</script>
<script>
    $(document).ready(function() {
        $('#cancel').hide();
        $('#play').click(function() {
            $('#gum').hide();
            $('#record').hide();
            $('#start').hide();
            $("#recorded").css({
                "height": "55vh",
                "width": "100vw",
            });
            $('#cancel').show();
        });
        $('#cancel').click(function() {
            window.open('recorder', '_parent');
        })
    })
</script>

</html>